# {{projectName}} - Help & Documentation

Welcome to the {{projectName}} project! This documentation provides comprehensive information for engineers working with this repository.

## üöÄ Quick Start

This project is built using the Genesis2 framework and consists of multiple integrated modules. Below you'll find detailed information about each component and how to work with them.

## üìã Project Overview

- **Project Name**: {{projectName}}
- **Domain**: {{domain}}
- **Repository**: {{repo}}
- **Owner**: {{project.owner}}
- **Version**: {{project.version}}
- **License**: {{project.license}}

## üèóÔ∏è Architecture Overview

This project follows a multi-layered architecture with the following modules:

{{#modules}}
### {{layer}} - {{type}} ({{name}})

{{kind}} module that handles {{layer}} layer functionality.

**Module Details:**
- **Kind**: {{kind}}
- **Layer**: {{layer}} 
- **Type**: {{type}}
- **Name**: {{name}}
{{#region}}
- **Region**: {{region}}
{{/region}}
- **Status**: {{#enabled}}‚úÖ Enabled{{/enabled}}{{^enabled}}‚ùå Disabled{{/enabled}}

{{#configs}}
**Configuration Variables:**
{{#configs}}
- `{{key}}`: {{value}} {{#secret}}üîê{{/secret}}{{#env}} ({{env}}){{/env}}
{{/configs}}

{{/configs}}
{{#dependencies}}
**Dependencies:**
{{#dependencies}}
- {{.}}
{{/dependencies}}

{{/dependencies}}
---

{{/modules}}

## üîß Development Setup

### Prerequisites
- Node.js 18+ (for frontend development)
- Java 21+ (for backend development) 
- Docker (for containerization)
- AWS CLI (for infrastructure deployment)

### Getting Started

1. **Clone the repository**
   ```bash
   git clone https://github.com/{{project.owner}}/{{repo}}.git
   cd {{repo}}
   ```

2. **Frontend Setup**
   ```bash
   # Look for directories starting with 'frontend-'
   cd frontend-*
   npm install
   npm run dev
   ```
   
   The frontend will be available at `http://localhost:3000`

3. **Backend Setup**
   ```bash
   # Look for directories starting with 'backend-'
   cd backend-*
   ./gradlew bootRun
   ```
   
   The backend API will be available at `http://localhost:8080`

4. **Infrastructure Setup**
   ```bash
   # Look for directories starting with 'ops-'
   cd ops-*
   
   # Initialize Terraform
   terraform init -backend-config=backend-production.hcl
   
   # Plan deployment
   terraform plan -var-file=environments/production.tfvars
   
   # Apply infrastructure
   terraform apply -var-file=environments/production.tfvars
   ```

## üåç Environment Configuration

This project supports multiple environments with the following configuration:

{{#modules}}
{{#configs}}
### {{name}} Configuration

{{#configs}}
- **{{key}}**: {{#env}}[{{env}}] {{/env}}{{value}} {{#secret}}(Secret){{/secret}}
{{/configs}}

{{/configs}}
{{/modules}}

## üöÄ Deployment

### CI/CD Pipeline
This project uses GitHub Actions for continuous integration and deployment:

- **Infrastructure**: Automated AWS infrastructure deployment
- **Backend**: Spring Boot application deployment to EC2
- **Frontend**: React application deployment to CloudFront/S3
- **SSL**: Automatic SSL certificate management

### Deployment Workflows
1. **Appinfra-010-init**: Sets up AWS resources and Terraform state
2. **Appinfra-020-bootstrap**: Configures S3 buckets and DynamoDB tables
3. **Appinfra-030-apply**: Deploys infrastructure changes
4. **Code-200-client**: Builds and deploys frontend application
5. **Code-300-server**: Builds and deploys backend application
6. **SSL Workflows**: Configures HTTPS certificates

### Available Environments
- **Development**: For local development and testing
- **Staging**: Pre-production environment for final testing
- **Production**: Live production environment

## üìö API Documentation

### Backend API

The backend API provides RESTful endpoints for the application.

- **Local URL**: `http://localhost:8080`
- **Production URL**: `https://api.{{domain}}`
- **Documentation**: Available at `/swagger-ui/index.html`
- **Health Check**: `GET /actuator/health`

**Key Endpoints:**
- `GET /actuator/health` - Service health status
- `GET /actuator/info` - Application information  
- Authentication endpoints via Auth0 integration

## üîê Security

### Authentication
{{#auth0Domain}}
This project uses Auth0 for authentication:
- **Auth0 Domain**: {{auth0Domain}}
- **Integration**: Seamless login/logout flow
- **Authorization**: Role-based access control
{{/auth0Domain}}

### Environment Security
- Production secrets are encrypted and managed via AWS
- Development uses placeholder values  
- Never commit real credentials to the repository
- Use `.env.local` files for local development secrets

## üõ†Ô∏è Troubleshooting

### Common Issues

1. **Build Failures**
   - Ensure all dependencies are installed: `npm install` or `./gradlew build`
   - Check Node.js version: `node --version` (should be 18+)
   - Check Java version: `java --version` (should be 21+)
   - Clear cache: `npm run clean` or `./gradlew clean`

2. **Infrastructure Deployment Issues**
   - Verify AWS credentials: `aws sts get-caller-identity`
   - Check Terraform state: `terraform state list`
   - Ensure DNS records are properly configured in your domain provider
   - Verify SSL certificate validation in AWS Certificate Manager

3. **SSL Certificate Issues**
   - Check certificate status in AWS Console (Certificate Manager)
   - Verify DNS validation records are added to your domain provider
   - Allow up to 48 hours for DNS propagation
   - Certificate must be in `us-east-1` region for CloudFront

4. **Auth0 Integration Issues**
   - Verify Auth0 domain and client ID configuration
   - Check callback URLs in Auth0 dashboard
   - Ensure proper CORS settings for your domain

### Debug Commands

```bash
# Check application logs
docker logs <container_name>

# Test API connectivity  
curl -X GET http://localhost:8080/actuator/health

# Check Terraform state
terraform show

# Validate AWS resources
aws ec2 describe-instances
aws s3 ls
```

### Getting Help

- **GitHub Issues**: Report bugs and request features at https://github.com/{{project.owner}}/{{repo}}/issues
- **Team Chat**: Reach out to the development team
- **Documentation**: Check module-specific README files in each directory
- **Stack Overflow**: Tag questions with `genesis2` and relevant technology tags

## üìÇ Project Structure

```
{{repo}}/
‚îú‚îÄ‚îÄ .github/workflows/          # CI/CD pipeline definitions
‚îú‚îÄ‚îÄ frontend-react-*/          # React frontend application
‚îú‚îÄ‚îÄ backend-spring-*/          # Spring Boot backend application  
‚îú‚îÄ‚îÄ ops-aws-*/                # AWS infrastructure as code
‚îú‚îÄ‚îÄ Help.md                   # This documentation file
‚îú‚îÄ‚îÄ README.md                 # Project overview
‚îî‚îÄ‚îÄ genesis2.json            # Genesis2 project metadata
```

## üìû Support & Contact

- **Repository**: https://github.com/{{project.owner}}/{{repo}}
- **Issues**: https://github.com/{{project.owner}}/{{repo}}/issues
- **Wiki**: https://github.com/{{project.owner}}/{{repo}}/wiki
- **Discussions**: https://github.com/{{project.owner}}/{{repo}}/discussions

## üîÑ Updates & Maintenance

This project is generated and maintained using the Genesis2 framework. To update:

1. **Update Genesis2 generators**: Pull latest changes from genesis2lib
2. **Re-generate modules**: Run genesis2 with updated payload.json
3. **Test thoroughly**: Verify all functionality after updates
4. **Deploy incrementally**: Use staging environment first

---

*Generated with ‚ù§Ô∏è by Genesis2 Framework*