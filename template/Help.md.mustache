# {{projectName}} - Help & Documentation

Welcome to {{projectName}}! This is a Genesis2-generated project with integrated infrastructure, backend, and frontend components.

## 🚀 Quick Start

### Local Development
1. **Frontend**: `cd frontend-* && npm install && npm run dev` (→ http://localhost:3000)
2. **Backend**: `cd backend-* && ./gradlew bootRun` (→ http://localhost:8080)
3. **Infrastructure**: See [GettingStarted.md](./GettingStarted.md) for AWS deployment

## 📋 Project Overview

- **Domain**: {{domain}}
- **Repository**: {{repo}}
- **Version**: {{project.version}}
- **Architecture**: Multi-layered (ops, backend, frontend{{#modules}}{{#configs}}, docs{{/configs}}{{/modules}})

## 🏗️ Architecture

{{#modules}}
### {{layer}} - {{type}}
{{kind}} module for {{layer}} layer functionality ({{#enabled}}✅ Enabled{{/enabled}}{{^enabled}}❌ Disabled{{/enabled}})
{{/modules}}

## ⚙️ Configuration & Deployment

### Required Setup
To deploy this project end-to-end, you need:

1. **AWS Account** with appropriate permissions
2. **GitHub Secrets** configured for CI/CD
3. **Domain** configured for SSL certificates

### GitHub Secrets Required
Configure these secrets in your GitHub repository settings:

```
AWS_ACCESS_KEY_ID          # AWS programmatic access key
AWS_SECRET_ACCESS_KEY      # AWS secret access key
TF_VAR_domain_name         # Your domain (e.g., yourdomain.com)
TF_VAR_subdomain           # Subdomain for this project
```

### AWS Setup
1. **Create AWS user** with appropriate permissions (EC2, S3, CloudFront, Route53, Certificate Manager)
2. **Generate access keys** and add to GitHub secrets
3. **Configure domain** in Route53 or point nameservers to AWS

### Deployment Process
1. Push code to trigger GitHub Actions workflows
2. Infrastructure deploys automatically via Terraform
3. Applications deploy to provisioned resources
4. SSL certificates auto-provision and renew

**📖 For detailed setup instructions, see [GettingStarted.md](./GettingStarted.md)**

## 🚀 GitHub Actions Workflows

| Workflow | Purpose |
|----------|----------|
| `Appinfra-010-init` | Initialize AWS resources and Terraform state |
| `Appinfra-020-bootstrap` | Configure S3 buckets and DynamoDB |
| `Appinfra-030-apply` | Deploy infrastructure changes |
| `Code-200-client` | Build and deploy frontend to CloudFront/S3 |
| `Code-300-server` | Build and deploy backend to EC2 |
| `SSL Workflows` | Manage HTTPS certificates |

## 📚 API & Security

### Backend API
- **Local**: http://localhost:8080
- **Production**: https://api.{{domain}}
- **Health Check**: `GET /actuator/health`
- **API Docs**: `/swagger-ui/index.html`

### Security
- **Authentication**: Auth0 integration with role-based access
- **Secrets**: Managed via AWS Systems Manager and GitHub Secrets
- **SSL**: Automatic certificate provisioning and renewal

## 🛠️ Troubleshooting

| Issue | Solution |
|-------|----------|
| Build failures | Check Node.js 18+ and Java 21+, run `npm install` or `./gradlew build` |
| AWS deployment | Verify credentials with `aws sts get-caller-identity` |
| SSL certificate | Check AWS Certificate Manager, ensure DNS records |
| Auth0 issues | Verify domain/client ID, check callback URLs |

### Debug Commands
```bash
curl -X GET http://localhost:8080/actuator/health  # Test API
aws sts get-caller-identity                        # Check AWS auth
terraform state list                               # Check infrastructure
```

## 📂 Project Structure
```
{{repo}}/
├── .github/workflows/     # CI/CD pipelines
├── frontend-react-*/      # React frontend
├── backend-spring-*/      # Spring Boot backend  
├── ops-aws-*/            # AWS infrastructure
├── Help.md               # This file
├── GettingStarted.md     # Detailed setup guide
└── genesis2.json         # Project metadata
```

## 📞 Support

- **Issues**: https://github.com/{{project.owner}}/{{repo}}/issues
- **Documentation**: Check module README files
- **Updates**: Generated with Genesis2 framework

---