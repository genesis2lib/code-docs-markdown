# {{projectName}} - Getting Started Guide

This guide will walk you through setting up {{projectName}} from development to production deployment.

## üìã Prerequisites

### Development Environment
- **Node.js 18+**: Frontend development and build tools
- **Java 21+**: Backend development (Spring Boot)
- **Docker**: Local database and containerization
- **Git**: Version control

### AWS Account Setup
1. **Create AWS Account** if you don't have one
2. **Create IAM User**:
   - User name: genesis2-admin
   - Next
   - Attach policies directly, Check `AdministratorAccess`
   - Next, Create User
3. **Create credentials**:
   - Select `genesis2-admin`
   - Go to `Security credentials` tab
   - Create access key
   - Select `Application running outside AWS`
   - Next
   - Description: `Key used by genesis2 ops`
   - Create access key
   - Copy the id into github [action variables**](../../../settings/variables/actions), with key `AWS_ADMIN_ID`
   - Copy the secret into [gitbuh **secrets**](../../../settings/secrets/actions), with key `AWS_ADMIN_SECRET`
   - 

### Domain Configuration
- **Domain**: Own a domain name if required by your infrastructure
- **DNS**: Configure DNS as needed for your deployment

## üöÄ Step-by-Step Setup

### 1. Clone and Local Development

```bash
# Clone repository
git clone https://github.com/{{project.owner}}/{{repo}}.git
cd {{repo}}
```

{{#backendModules}}
```bash
# Start {{name}} ({{type}})
cd {{name}}
{{startCommand}}
```
{{/backendModules}}

{{#frontendModules}}
```bash
# Start {{name}} ({{type}})
cd {{name}}
{{startCommand}}
```
{{/frontendModules}}

### 2. Repository Secrets

Go to your GitHub repository ‚Üí Settings ‚Üí Secrets and variables ‚Üí Actions

Add these **Repository secrets**:

```
AWS_ADMIN_KEY              # Your AWS access key for infrastructure
DNS_PROVIDER_KEY           # Your DNS provider key for domain management
```

### 3. Deploy Infrastructure

#### Option A: Automatic Deployment (Recommended)
1. **Push to main branch** - this triggers all workflows automatically
2. **Monitor GitHub Actions** - watch the workflows complete in order:
   - `Appinfra-010-init` ‚Üí `Appinfra-020-bootstrap` ‚Üí `Appinfra-030-apply`
   - `Code-200-client` and `Code-300-server` (run in parallel)

#### Option B: Manual Deployment
```bash
{{#opsModules}}
# Navigate to {{name}} directory
cd {{name}}

# Check the module's README for specific deployment instructions
{{/opsModules}}
```

### 4. Verify Deployment

After deployment completes (5-10 minutes), verify:

#### Frontend
- Visit: `https://{{projectName}}.{{domain}}`
- Should load React application

#### Backend API  
- Visit: `https://api.{{domain}}/actuator/health`
- Should return: `{"status":"UP"}`

#### SSL Certificate
- Check browser padlock icon (should be green/secure)
- Certificate auto-renews every 60 days

## üîß Configuration Details

### Essential Environment Variables

Only these essential variables are required for deployment:

- **AWS_ADMIN_KEY**: Your AWS access key for infrastructure management
- **DNS_PROVIDER_KEY**: Your DNS provider API key for domain configuration

All other application configurations are automatically managed during deployment.

### Custom Configuration

To modify application settings:

1. **Development**: Edit `.env.local` files in respective modules
2. **Production**: Update GitHub secrets or modify Terraform variables

### Database Configuration

The backend uses PostgreSQL running on AWS RDS:
- **Local**: Docker container (started with `docker-compose up`)
- **Production**: RDS instance (automatically provisioned)

### Auth0 Setup (if applicable)

{{#auth0Domain}}
If your project includes Auth0:

1. Create Auth0 account and application
2. Configure callback URLs:
   - Development: `http://localhost:3000/callback`
   - Production: `https://{{projectName}}.{{domain}}/callback`
3. Add Auth0 secrets to GitHub repository secrets
{{/auth0Domain}}

## üîç Monitoring & Maintenance

### Health Checks
- **Frontend**: Accessible via CloudFront
- **Backend**: `GET /actuator/health`
- **Infrastructure**: AWS Console monitoring

### Logs
- **Application Logs**: CloudWatch Logs
- **Infrastructure**: CloudTrail
- **Deployment**: GitHub Actions logs

### Backups
- **Database**: Automatic RDS snapshots (daily)
- **Code**: Git repository
- **Infrastructure**: Terraform state in S3

## ‚ùì Common Issues

### SSL Certificate Issues
**Problem**: SSL certificate not issuing
**Solution**: 
1. Verify DNS records in Route53 match your domain
2. Check Certificate Manager in `us-east-1` region
3. Allow 5-10 minutes for validation

### Deployment Failures
**Problem**: GitHub Actions failing
**Solution**:
1. Check AWS credentials are correct
2. Verify IAM permissions
3. Review GitHub Actions logs for specific errors

### Application Not Loading
**Problem**: 404 or connection errors
**Solution**:
1. Check if infrastructure deployed successfully
2. Verify security groups allow traffic
3. Check CloudFront distribution status

## üöÄ Next Steps

After successful deployment:

1. **Custom Domain**: Point your domain to the deployed application
2. **Monitoring**: Set up CloudWatch alarms
3. **Backups**: Configure automated backups
4. **Scaling**: Adjust instance sizes based on usage
5. **Security**: Review and tighten security groups

---

**Need help?** Create an issue in the [GitHub repository](https://github.com/{{project.owner}}/{{repo}}/issues)